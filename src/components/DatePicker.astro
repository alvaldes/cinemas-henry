---
interface Props {
  initialDate: Date;
  onDateChange: (newDate: Date) => void; // Nueva propiedad para manejar el cambio de fecha
}

const { initialDate, onDateChange } = Astro.props;
let selectedDate: string = initialDate.toLocaleDateString('en-CA');
let error: string | null = null;

// Get yesterday's date in YYYY-MM-DD format
const today = new Date();
const formattedToday = today.toLocaleDateString('en-CA');
---
<form class="space-y-4" data-on-date-change={onDateChange.toString()}>
  <input
    type="date"
    id="dob"
    name="dob"
    value={selectedDate}
    min={formattedToday}
    class="mt-1 px-4 py-2 block w-40 rounded-md border border-gray-700 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
  />
  {error && <p class="text-red-500 text-sm mt-1">{error}</p>}
</form>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    // Encuentra el input de fecha en la página.
    const dateInput = document.getElementById('dob');
    const form = document.querySelector('form');
    const onDateChange = new Function('return ' + form.dataset.onDateChange)();

    if (dateInput) {
      // Manejar el cambio de fecha.
      dateInput.addEventListener('change', (event) => {
        const selectedDate = event.target.value;
        if (typeof onDateChange === 'function') {
          onDateChange(new Date(selectedDate)); // Llamar a la función de devolución de llamada con la nueva fecha
        } else {
          console.error("onDateChange no está definida o no es una función.");
        }
      });
    } else {
      console.error("El elemento con id 'dob' no se encontró.");
    }
  });
</script>